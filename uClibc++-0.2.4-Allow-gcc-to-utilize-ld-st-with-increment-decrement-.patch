--- uClibc++-0.2.4/include/algorithm.inc_dec~	2014-03-24 21:34:01.464249815 +0100
+++ uClibc++-0.2.4/include/algorithm	2014-03-24 21:43:17.265979772 +0100
@@ -390,9 +390,7 @@ namespace std{
 		copy(InputIterator first, InputIterator last, OutputIterator result)
 	{
 		while(first != last) {
-			*result = *first;
-			++first;
-			++result;
+			*(result++) = *(first++);
 		}
 		return result;
 	}
@@ -403,9 +401,7 @@ namespace std{
 			BidirectionalIterator2 result)
 	{
 		while(first !=last ) {
-			--result;
-			--last;
-			*result = *last;
+			*(--result) = *(--last);
 		}
 		return result;
 	}
@@ -454,9 +450,7 @@ namespace std{
 		swap_ranges(ForwardIterator1 first1, ForwardIterator1 last1, ForwardIterator2 first2)
 	{
 		while(first1 != last1) {
-			iter_swap(first1, first2);
-			++first1;
-			++first2;
+			iter_swap(first1++, first2++);
 		}
 		return first2;
 	}
@@ -478,9 +472,7 @@ namespace std{
 			OutputIterator result, UnaryOperation op)
 	{
 		while(first != last){
-			*result = op(*first);
-			++first;
-			++result;
+			*(result++) = op(*(first++));
 		}
 		return result;
 	}
@@ -492,10 +484,7 @@ namespace std{
 			BinaryOperation binary_op)
 	{
 		while(first1 != last1){
-			*result = binary_op(*first1, *first2);
-			++first1;
-			++first2;
-			++result;
+			*(result++) = binary_op(*(first1++), *(first2++));
 		}
 		return result;
 	}
@@ -535,12 +524,11 @@ namespace std{
 	{
 		while(first != last){
 			if(*first == old_value){
-				*result = new_value;
+				*(result++) = new_value;
 			}else{
-				*result = *first;
+				*(result++) = *first;
 			}
 			++first;
-			++result;
 		}
 		return result;
 	}
@@ -552,12 +540,11 @@ namespace std{
 	{
 		while(first != last){
 			if( pred(*first) ){
-				*result = new_value;
+				*(result++) = new_value;
 			}else{
-				*result = *first;
+				*(result++) = *first;
 			}
 			++first;
-			++result;
 		}
 		return result;
 	}
@@ -567,8 +554,7 @@ namespace std{
 		fill(ForwardIterator first, ForwardIterator last, const T& value)
 	{
 		while(first != last){
-			*first = value;
-			++first;
+			*(first++) = value;
 		}
 	}
 
@@ -576,10 +562,8 @@ namespace std{
 		void
 		fill_n(OutputIterator first, Size n, const T& value)
 	{
-		while(n != 0){
-			*first = value;
-			--n;
-			++first;
+		while(n-- != 0){
+			*(first++) = value;
 		}
 	}
 
@@ -588,8 +572,7 @@ namespace std{
 		generate(ForwardIterator first, ForwardIterator last, Generator gen)
 	{
 		while(first != last){
-			*first = gen();
-			++first;
+			*(first++) = gen();
 		}
 	}
 
@@ -597,10 +580,8 @@ namespace std{
 		void
 		generate_n(OutputIterator first, Size n, Generator gen)
 	{
-		while(n !=0){
-			*first = gen();
-			--n;
-			++first;
+		while(n-- !=0){
+			*(first++) = gen();
 		}
 	}
 
@@ -609,12 +590,9 @@ namespace std{
 		remove(ForwardIterator first, ForwardIterator last, const T& value)
 	{
 		ForwardIterator temp(first);
-		while(temp !=last){
-			if(*temp == value){
-
-			}else{
-				*first = *temp;
-				++first;
+		while(temp != last){
+			if(!(*temp == value)){
+				*(first++) = *temp;
 			}
 			++temp;
 		}
@@ -627,11 +605,8 @@ namespace std{
 	{
 		ForwardIterator temp(first);
 		while(temp !=last){
-			if( pred(*temp) ){
-
-			}else{
-				*first = *temp;
-				++first;
+			if(!pred(*temp)){
+				*(first++) = *temp;
 			}
 			++temp;
 		}
@@ -646,8 +621,7 @@ namespace std{
 	{
 		while(first !=last){
 			if(*first != value){
-				*result = *first;
-				++result;
+				*(result++) = *first;
 			}
 			++first;
 		}
@@ -661,8 +635,7 @@ namespace std{
 	{
 		while(first !=last){
 			if( !pred(*first) ){
-				*result = *first;
-				++result;
+				*(result++) = *first;
 			}
 			++first;
 		}
@@ -677,12 +650,9 @@ namespace std{
 		ForwardIterator old_val(first);
 
 		while(new_val !=last){
-			if(*new_val == *old_val && new_val != old_val){
-
-			}else{
-				*first = *new_val;
+			if(*new_val != *old_val || new_val == old_val){
+				*(first++) = *new_val;
 				old_val = new_val;
-				++first;
 			}
 			++new_val;
 		}
@@ -697,12 +667,9 @@ namespace std{
 		ForwardIterator old_val(first);
 
 		while(new_val !=last){
-			if( pred(*new_val, *old_val) && new_val != old_val){
-
-			}else{
-				*first = *new_val;
+			if( !pred(*new_val, *old_val) || new_val == old_val){
+				*(first++) = *new_val;
 				old_val = new_val;
-				++first;
 			}
 			++new_val;
 		}
@@ -715,12 +682,9 @@ namespace std{
 	{
 		InputIterator temp(first);
 		while(first !=last ){
-			if(*first == *temp && first != temp){
-
-			}else{
-				*result = *first;
+			if(*first != *temp || first == temp){
+				*(result++) = *first;
 				temp = first;
-				++result;
 			}
 			++first;
 		}
@@ -734,12 +698,9 @@ namespace std{
 	{
 		InputIterator temp(first);
 		while(first !=last ){
-			if( pred(*first, *temp) && first != temp){
-
-			}else{
-				*result = *first;
+			if( !pred(*first, *temp) || first == temp){
+				*(result++) = *first;
 				temp = first;
-				++result;
 			}
 			++first;
 		}
@@ -752,9 +713,7 @@ namespace std{
 	{
 		--last;		//Don't work with one past the end element
 		while(first < last){
-			iter_swap(first, last);
-			++first;
-			--last;
+			iter_swap(first++, last--);
 		}
 	}
 
@@ -764,9 +723,7 @@ namespace std{
 		OutputIterator result)
 	{
 		while(last > first){
-			--last;
-			*result = *last;
-			++result;
+			*(result++) = *(--last);
 		}
 		return result;
 	}
@@ -782,9 +739,7 @@ namespace std{
 		ForwardIterator first2 = middle;
 
 		do {
-			swap(*first, *first2);
-			first++;
-			first2++;
+			swap(*(first++), *(first2++));
 			if(first == middle){
 				middle = first2;
 			}
@@ -793,9 +748,7 @@ namespace std{
 		first2 = middle;
 
 		while (first2 != last) {
-			swap(*first, *first2);
-			first++;
-			first2++;
+			swap(*(first++), *(first2++));
 			if (first == middle){
 				middle = first2;
 			}else if (first2 == last){
@@ -811,14 +764,10 @@ namespace std{
 	{
 		ForwardIterator temp(middle);
 		while(temp !=last){
-			*result = *temp;
-			++temp;
-			++result;
+			*(result++) = *(temp++);
 		}
 		while(first != middle){
-			*result = *first;
-			++first;
-			++result;
+			*(result++) = *(first++);
 		}
 		return result;
 	}
@@ -974,9 +923,7 @@ namespace std{
 		RandomAccessIterator temp = result_first;
 
 		while(temp != middle){
-			*temp = *first;
-			++temp;
-			++first;
+			*(temp++) = *(first++);
 		}
 		sort(result_first, middle, comp);
 
@@ -1140,24 +1087,17 @@ namespace std{
 		while( first1 != last1 && first2 != last2){
 			//If in this order so first1 elements which are equal come first
 			if( comp(*first2, *first1) ){
-				*result = *first2;
-				++first2;
+				*(result++) = *(first2++);
 			}else{
-				*result = *first1;
-				++first1;
+				*(result++) = *(first1++);
 			}
-			++result;
 		}
 		//Clean up remaining elements
 		while(first1 != last1){
-			*result = *first1;
-			++first1;
-			++result;
+			*(result++) = *(first1++);
 		}
 		while(first2 != last2){
-			*result = *first2;
-			++first2;
-			++result;
+			*(result++) = *(first2++);
 		}
 		return result;
 	}
@@ -1257,8 +1197,7 @@ namespace std{
 
 		//Clean up remaining elements
 		while(first1 != last1){
-			*result = *first1;
-			++result;
+			*(result++) = *first1;
 			InputIterator1 temp = first1;
 			while( first1 != last1 && !comp( *temp, *first1) ){
 				++first1;
@@ -1266,8 +1205,7 @@ namespace std{
 		}
 
 		while(first2 != last2){
-			*result = *first2;
-			++result;
+			*(result++) = *first2;
 			InputIterator2 temp = first2;
 			while( first2 != last2 && !comp( *temp, *first2) ){
 				++first2;
@@ -1293,8 +1231,7 @@ namespace std{
 			}else if( comp(*first1, *first2) ) {
 				++first1;
 			}else{
-				*result = *first1;
-				++result;
+				*(result++) = *first1;
 				InputIterator1 temp = first1;
 				while( first1 != last1 && !comp( *temp, *first1) ){
 					++first1;
@@ -1317,8 +1254,7 @@ namespace std{
 	{
 		while( first1 != last1 && first2 != last2){
 			if( comp(*first1, *first2) ){
-				*result = *first1;
-				++result;
+				*(result++) = *first1;
 
 				//Elliminate duplicates
 				InputIterator1 temp = first1;
@@ -1347,8 +1283,7 @@ namespace std{
 
 		//Clean up remaining elements
 		while(first1 != last1){
-			*result = *first1;
-			++result;
+			*(result++) = *first1;
 			InputIterator1 temp = first1;
 			while( first1 != last1 && !comp( *temp, *first1) ){
 				++first1;
@@ -1370,8 +1305,7 @@ namespace std{
 	{
 		while( first1 != last1 && first2 != last2){
 			if( comp(*first1, *first2) ){
-				*result = *first1;
-				++result;
+				*(result++) = *first1;
 
 				//Elliminate duplicates
 				InputIterator1 temp = first1;
@@ -1379,8 +1313,7 @@ namespace std{
 					++first1;
 				}
 			}else if( comp(*first2, *first1) ){
-				*result = *first2;
-				++result;
+				*(result++) = *first2;
 
 				//Elliminate duplicates
 				InputIterator2 temp = first2;
@@ -1402,8 +1335,7 @@ namespace std{
 
 		//Clean up remaining elements
 		while(first1 != last1){
-			*result = *first1;
-			++result;
+			*(result++) = *first1;
 			InputIterator1 temp = first1;
 			while( first1 != last1 && !comp( *temp, *first1) ){
 				++first1;
@@ -1411,8 +1343,7 @@ namespace std{
 		}
 
 		while(first2 != last2){
-			*result = *first2;
-			++result;
+			*(result++) = *first2;
 			InputIterator2 temp = first2;
 			while( first2 != last2 && !comp( *temp, *first2) ){
 				++first2;
