From 4a502b3f8b98e109e203f249dd5eedf136cf8e48 Mon Sep 17 00:00:00 2001
From: Ryan Pavlik <rpavlik@iastate.edu>
Date: Fri, 15 Jun 2012 15:30:02 -0500
Subject: [PATCH 1/2] Extend limits (more types, some implementations)

Used the libc++ (llvm license) version, and results of
preprocessing source locally with GCC, to implement.

Signed-off-by: Ryan Pavlik <rpavlik@iastate.edu>
---
 include/limits | 106 ++++++++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 98 insertions(+), 8 deletions(-)

diff --git a/include/limits b/include/limits
index e275eb5..549789a 100644
--- a/include/limits
+++ b/include/limits
@@ -613,6 +613,45 @@ public:
 	static T signaling_NaN();
 };
 
+template <> class numeric_limits<float> {
+public:
+	typedef float numeric_type;
+
+	static const bool is_specialized = true;
+	static numeric_type min () { return __FLT_MIN__; }
+	static numeric_type max () { return __FLT_MAX__; }
+	static const int radix = __FLT_RADIX__;
+	static const int digits = __FLT_MANT_DIG__;
+	static const int digits10 = __FLT_DIG__;
+	static const bool is_signed = true;
+	static const bool is_integer = false;
+	static const bool is_exact = false;
+	static const bool traps = false; // this is a guess
+	static const bool is_modulo = false;
+	static const bool is_bounded = true;
+
+	// Floating point specific.
+
+	static numeric_type epsilon () { return __FLT_EPSILON__; }
+	static numeric_type round_error () { return 0.5; }
+	static const int min_exponent10 = __FLT_MIN_10_EXP__; //How do I properly get this?
+	static const int max_exponent10 = __FLT_MAX_10_EXP__; //How do I properly get this?
+	static const int min_exponent   = __FLT_MIN_EXP__; //How do I properly get this?
+	static const int max_exponent   = __FLT_MAX_EXP__; //How do I properly get this?
+	static const bool has_infinity  = __FLT_HAS_INFINITY__; //I don't know, so until I can find out, I'm saying no
+	static const bool has_quiet_NaN = __FLT_HAS_QUIET_NAN__; //I don't know, so until I can find out, I'm saying no
+	static const bool has_signaling_NaN = false; //I don't know, so until I can find out, I'm saying no
+	static const bool has_denorm = __FLT_HAS_DENORM__; //I don't know, so until I can find out, I'm saying no
+
+	static const bool is_iec559 = false;  //I don't know, so until I can find out, I'm saying no
+	static const bool tinyness_before = false; // more questions
+	static const float_round_style round_style = round_to_nearest; // more questions
+	static numeric_type denorm_min () { return __FLT_DENORM_MIN__; } //How do I properly get this?
+	static numeric_type infinity () { return -1; } //How do I properly get this?
+	static numeric_type quiet_NaN () { return -1; } //How do I properly get this?
+	static numeric_type signaling_NaN () { return -1; } //How do I properly get this?
+};
+
 template <> class numeric_limits<double> {
 public:
 	typedef double numeric_type;
@@ -634,27 +673,78 @@ public:
 
 	static numeric_type epsilon () { return __DBL_EPSILON__; }
 	static numeric_type round_error () { return 0.5; }
-	static const int min_exponent10 = -1; //How do I properly get this?
-	static const int max_exponent10 = -1; //How do I properly get this?
-	static const int min_exponent   = -1; //How do I properly get this?
-	static const int max_exponent   = -1; //How do I properly get this?
-	static const bool has_infinity  = false; //I don't know, so until I can find out, I'm saying no
-	static const bool has_quiet_NaN = false; //I don't know, so until I can find out, I'm saying no
+	static const int min_exponent10 = __DBL_MIN_10_EXP__; //How do I properly get this?
+	static const int max_exponent10 = __DBL_MAX_10_EXP__; //How do I properly get this?
+	static const int min_exponent   = __DBL_MIN_EXP__; //How do I properly get this?
+	static const int max_exponent   = __DBL_MAX_EXP__; //How do I properly get this?
+	static const bool has_infinity  = __DBL_HAS_INFINITY__; //I don't know, so until I can find out, I'm saying no
+	static const bool has_quiet_NaN = __DBL_HAS_QUIET_NAN__; //I don't know, so until I can find out, I'm saying no
 	static const bool has_signaling_NaN = false; //I don't know, so until I can find out, I'm saying no
-	static const bool has_denorm = false; //I don't know, so until I can find out, I'm saying no
+	static const bool has_denorm = __DBL_HAS_DENORM__; //I don't know, so until I can find out, I'm saying no
 
 	static const bool is_iec559 = false;  //I don't know, so until I can find out, I'm saying no
 	static const bool tinyness_before = false; // more questions
 	static const float_round_style round_style = round_to_nearest; // more questions
-	static numeric_type denorm_min () { return -1; } //How do I properly get this?
+	static numeric_type denorm_min () { return __DBL_DENORM_MIN__; } //How do I properly get this?
 	static numeric_type infinity () { return -1; } //How do I properly get this?
 	static numeric_type quiet_NaN () { return -1; } //How do I properly get this?
 	static numeric_type signaling_NaN () { return -1; } //How do I properly get this?
 };
 
 
+template <> class numeric_limits<long double> {
+public:
+	typedef long double numeric_type;
 
+	static const bool is_specialized = true;
+	static numeric_type min () { return __LDBL_MIN__; }
+	static numeric_type max () { return __LDBL_MAX__; }
+	static const int radix = __FLT_RADIX__;
+	static const int digits = __LDBL_MANT_DIG__;
+	static const int digits10 = __LDBL_DIG__;
+	static const bool is_signed = true;
+	static const bool is_integer = false;
+	static const bool is_exact = false;
+	static const bool traps = false; // this is a guess
+	static const bool is_modulo = false;
+	static const bool is_bounded = true;
 
+	// Floating point specific.
+
+	static numeric_type epsilon () { return __LDBL_EPSILON__; }
+	static numeric_type round_error () { return 0.5; }
+	static const int min_exponent10 = __LDBL_MIN_10_EXP__; //How do I properly get this?
+	static const int max_exponent10 = __LDBL_MAX_10_EXP__; //How do I properly get this?
+	static const int min_exponent   = __LDBL_MIN_EXP__; //How do I properly get this?
+	static const int max_exponent   = __LDBL_MAX_EXP__; //How do I properly get this?
+	static const bool has_infinity  = __LDBL_HAS_INFINITY__; //I don't know, so until I can find out, I'm saying no
+	static const bool has_quiet_NaN = __LDBL_HAS_QUIET_NAN__; //I don't know, so until I can find out, I'm saying no
+	static const bool has_signaling_NaN = false; //I don't know, so until I can find out, I'm saying no
+	static const bool has_denorm = __LDBL_HAS_DENORM__; //I don't know, so until I can find out, I'm saying no
+
+	static const bool is_iec559 = false;  //I don't know, so until I can find out, I'm saying no
+	static const bool tinyness_before = false; // more questions
+	static const float_round_style round_style = round_to_nearest; // more questions
+	static numeric_type denorm_min () { return __LDBL_DENORM_MIN__; } //How do I properly get this?
+	static numeric_type infinity () { return -1; } //How do I properly get this?
+	static numeric_type quiet_NaN () { return -1; } //How do I properly get this?
+	static numeric_type signaling_NaN () { return -1; } //How do I properly get this?
+};
+
+template<class T> class numeric_limits<const T> : public numeric_limits<T> {
+	public:
+		typedef const T numeric_type;
+};
+
+template<class T> class numeric_limits<volatile T> : public numeric_limits<T> {
+	public:
+		typedef volatile T numeric_type;
+};
+
+template<class T> class numeric_limits<const volatile T> : public numeric_limits<T> {
+	public:
+		typedef const volatile T numeric_type;
+};
 
 }
 
-- 
1.9.0

