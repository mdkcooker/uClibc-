From b67e1f1ec8047f9fb29a6e7089e6b51db23eb3b2 Mon Sep 17 00:00:00 2001
From: Ryan Pavlik <rpavlik@iastate.edu>
Date: Fri, 15 Jun 2012 15:30:59 -0500
Subject: [PATCH 2/2] Provide implementation for non-specialized
 numeric_limits.

Fixes issues with Eigen (trying to get limits of std::complex)
and matches behavior of libc++

Signed-off-by: Ryan Pavlik <rpavlik@iastate.edu>
---
 include/limits | 58 +++++++++++++++++++++++++++++-----------------------------
 1 file changed, 29 insertions(+), 29 deletions(-)

diff --git a/include/limits b/include/limits
index 549789a..8cdb1e0 100644
--- a/include/limits
+++ b/include/limits
@@ -109,38 +109,38 @@ public:
 	// General -- meaningful for all specializations.
 
 	static const bool is_specialized = false;
-	static T min();
-	static T max();
-	static const int radix;
-	static const int digits;
-	static const int digits10;
-	static const bool is_signed;
-	static const bool is_integer;
-	static const bool is_exact;
-	static const bool traps;
-	static const bool is_modulo;
-	static const bool is_bounded;
+	static T min() { return T(); }
+	static T max() { return T(); }
+	static const int radix = 0;
+	static const int digits = 0;
+	static const int digits10 = 0;
+	static const bool is_signed = false;
+	static const bool is_integer = false;
+	static const bool is_exact = false;
+	static const bool traps = false;
+	static const bool is_modulo = false;
+	static const bool is_bounded = false;
 
 	// Floating point specific.
 
-	static T epsilon();
-	static T round_error();
-	static const int min_exponent10;
-	static const int max_exponent10;
-	static const int min_exponent;
-
-	static const int max_exponent;
-	static const bool has_infinity;
-	static const bool has_quiet_NaN;
-	static const bool has_signaling_NaN;
-	static const bool is_iec559;
-	static const bool has_denorm;
-	static const bool tinyness_before;
-	static const float_round_style round_style;
-	static T denorm_min();
-	static T infinity();
-	static T quiet_NaN();
-	static T signaling_NaN();
+	static T epsilon() { return T(); }
+	static T round_error() { return T(); }
+	static const int min_exponent10 = 0;
+	static const int max_exponent10 = 0;
+	static const int min_exponent = 0;
+
+	static const int max_exponent = 0;
+	static const bool has_infinity = false;
+	static const bool has_quiet_NaN = false;
+	static const bool has_signaling_NaN = false;
+	static const bool is_iec559 = false;
+	static const bool has_denorm = false;
+	static const bool tinyness_before = false;
+	static const float_round_style round_style = round_toward_zero;
+	static T denorm_min() { return T(); }
+	static T infinity() { return T(); }
+	static T quiet_NaN() { return T(); }
+	static T signaling_NaN() { return T(); }
 };
 
 template <> class numeric_limits<bool> {
-- 
1.9.0

