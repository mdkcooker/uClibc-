From 7ba8c3d73a227ba9e52f3e1d334bab056f403ff3 Mon Sep 17 00:00:00 2001
From: Alexey Guseynov <kibergus@gmail.com>
Date: Sun, 12 Aug 2012 17:52:58 +0400
Subject: [PATCH] Add free functions begin(container) and end(container)

---
 include/associative_base    |  2 +-
 include/bits/range_access.h | 68 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 include/list                |  1 +
 include/vector              |  1 +
 4 files changed, 71 insertions(+), 1 deletion(-)
 create mode 100644 bits/range_access.h

diff --git a/include/associative_base b/include/associative_base
index 66474ff..3ca3bea 100644
--- a/include/associative_base
+++ b/include/associative_base
@@ -23,7 +23,7 @@
 #include<iterator>
 #include<functional>
 #include<list>
-
+#include"bits/range_access.h"
 
 #ifndef __STD_HEADER_ASSOCIATIVE_BASE
 #define __STD_HEADER_ASSOCIATIVE_BASE
diff --git a/include/bits/range_access.h b/include/bits/range_access.h
new file mode 100644
index 0000000..627c5e3
--- /dev/null
+++ b/include/include/bits/range_access.h
@@ -0,0 +1,68 @@
+/*	Copyright (C) 2012 Alexey Guseynov
+
+	This file is part of the uClibc++ Library.
+
+	This library is free software; you can redistribute it and/or
+	modify it under the terms of the GNU Lesser General Public
+	License as published by the Free Software Foundation; either
+	version 2.1 of the License, or (at your option) any later version.
+
+	This library is distributed in the hope that it will be useful,
+	but WITHOUT ANY WARRANTY; without even the implied warranty of
+	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+	Lesser General Public License for more details.
+
+	You should have received a copy of the GNU Lesser General Public
+	License along with this library; if not, write to the Free Software
+	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+#ifndef __STD_HEADER_RANGE_ACCESS_H
+#define __STD_HEADER_RANGE_ACCESS_H
+
+#pragma GCC system_header
+
+// Free functions begin(container) and end(container) for
+// any containers with begin and and methods and for arrays
+
+namespace std {
+
+// begin for non const container
+template<class Container>
+inline auto begin(Container& c) -> decltype(c.begin()) {
+	return c.begin();
+}
+
+// begin for const container
+template<class Container>
+inline auto begin(const Container& c) -> decltype(c.begin()) {
+	return c.begin();
+}
+
+// end for non const container
+template<class Container>
+inline auto end(Container& c) -> decltype(c.end()) {
+	return c.end();
+}
+
+// end for const container
+template<class Container>
+inline auto end(const Container& c) -> decltype(c.end()) {
+	return c.end();
+}
+
+/// Return an iterator pointing to the first element of the array.
+template<class ValueType, size_t Size>
+inline ValueType* begin(ValueType (&arr)[Size]) {
+	return arr;
+}
+
+/// Return an iterator pointing to one past the last element
+template<class ValueType, size_t Size>
+inline ValueType* end(ValueType (&arr)[Size]) {
+	return arr + Size;
+}
+
+} // namespace
+
+#endif // __STD_HEADER_RANGE_ACCESS_H
diff --git a/include/list b/include/list
index de8edad..89c90b8 100644
--- a/include/list
+++ b/include/list
@@ -20,6 +20,7 @@
 #include <memory>
 #include <iterator>
 #include <algorithm>
+#include "bits/range_access.h"
 
 #ifndef __STD_HEADER_LIST
 #define __STD_HEADER_LIST 1
diff --git a/include/vector b/include/vector
index 2e17cbe..96cdc63 100644
--- a/include/vector
+++ b/include/vector
@@ -25,6 +25,7 @@
 #include <algorithm>
 #include <type_traits>
 #include <initializer_list>
+#include "bits/range_access.h"
 
 #ifndef __STD_HEADER_VECTOR
 #define __STD_HEADER_VECTOR
-- 
1.9.0

