From 9d0927a4449f13da0f0772539a3a5f3a81ff93ba Mon Sep 17 00:00:00 2001
From: Alexey Guseynov <kibergus@gmail.com>
Date: Sun, 2 Sep 2012 17:09:38 +0400
Subject: [PATCH] allocator now supports emplace construction

---
 include/char_traits |  1 -
 include/forward.h   | 53 -----------------------------------------------------
 include/memory      |  5 +++++
 include/type_traits |  1 -
 4 files changed, 5 insertions(+), 55 deletions(-)
 delete mode 100644 forward.h

diff --git a/include/char_traits b/include/char_traits
index 36eae36..f4a546d 100644
--- a/include/char_traits
+++ b/include/char_traits
@@ -19,7 +19,6 @@
 #include <basic_definitions>
 #include <string.h>
 #include <exception>
-#include <memory>
 
 #ifdef __UCLIBCXX_HAS_WCHAR__
 #include <cwchar>
diff --git a/include/forward.h b/include/forward.h
deleted file mode 100644
index 186c858..0000000
--- a/include/forward.h
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * avr-gcc lacks C++ standard library. I need some
- * things form this library so I copied them here.
- */
-
-// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.
-//
-// This file is part of GCC.
-//
-// GCC is free software; you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation; either version 3, or (at your option)
-// any later version.
-//
-// GCC is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// Under Section 7 of GPL version 3, you are granted additional
-// permissions described in the GCC Runtime Library Exception, version
-// 3.1, as published by the Free Software Foundation.
-
-// You should have received a copy of the GNU General Public License and
-// a copy of the GCC Runtime Library Exception along with this program;
-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
-// <http://www.gnu.org/licenses/>.
-
-#ifndef FORWARD_H_INCLIUDED
-#define FORWARD_H_INCLIUDED
-
-namespace std {
-
-#include "type_traits"
-
-/// forward (as per N3143)
-template<typename _Tp>
-    inline _Tp&&
-    forward(typename std::remove_reference<_Tp>::type& __t) 
-    { return static_cast<_Tp&&>(__t); }
-
-template<typename _Tp>
-    inline _Tp&&
-    forward(typename std::remove_reference<_Tp>::type&& __t) 
-    {
-      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
-		    " substituting _Tp is an lvalue reference type");
-      return static_cast<_Tp&&>(__t);
-    }
-    
-} // namespace std
-
-#endif // FORWARD_H_INCLIUDED
diff --git a/include/memory b/include/memory
index ecf8103..d91af8e 100644
--- a/include/memory
+++ b/include/memory
@@ -71,6 +71,11 @@ public:
 
 	//Use placement new to engage the constructor
 	void construct(pointer p, const T& val) { new((void*)p) T(val); }
+#ifdef __GXX_EXPERIMENTAL_CXX0X__
+    template<typename... Args>
+    void construct(pointer p, Args&&... args)
+	{ ::new((void *)p) T(forward<Args>(args)...); }
+#endif
 	void destroy(pointer p){ ((T*)p)->~T(); }	//Call destructor
 
 	size_type max_size() const throw();
diff --git a/include/type_traits b/include/type_traits
index 907c3f6..85a3087 100644
--- a/include/type_traits
+++ b/include/type_traits
@@ -19,7 +19,6 @@
 #include <basic_definitions>
 #include <string.h>
 #include <exception>
-#include <memory>
 #include <char_traits>
 
 #ifndef __HEADER_TYPE_TRAITS
-- 
1.9.0

