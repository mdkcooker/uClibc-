From db97a10390785031f6087e18c680e132544a94b7 Mon Sep 17 00:00:00 2001
From: Alexey Guseynov <kibergus@gmail.com>
Date: Tue, 21 Aug 2012 23:01:17 +0400
Subject: [PATCH] Rewrite lower_bound and upper_bound in a more compact way.
 Add std::is_pod and std::enable_if.

---
 include/algorithm   | 83 ++++++++++++++++++-------------------------------------------
 include/type_traits | 33 ++++++++++++++++++++++++
 2 files changed, 57 insertions(+), 59 deletions(-)

diff --git a/include/algorithm b/include/algorithm
index 8156d03..da1b859 100644
--- a/include/algorithm
+++ b/include/algorithm
@@ -943,38 +943,21 @@ namespace std{
 		ForwardIterator lower_bound(ForwardIterator first, ForwardIterator last,
 			const T& value, Compare comp)
 	{
-		if(first == last){
-			return last;
-		}
-		//If below or equal to the first element
-		if( comp(*first, value) == false){
-			return first;
-		}
-		ForwardIterator middle;
-
-		//If greater than the top element
-		middle = first;
-		advance(middle, distance(first, last) - 1);
-		if( comp(*middle, value) ){
-			return last;
-		}
-
-		//Now begin the actual search for the begining
-		while( distance(first, last) > 1 ){
-			//Find middle
-			middle = first;
-			advance(middle, (distance(first, last)/2) );
-			if( !comp(*middle, value) ){
-				last = middle;
-			}else{
+		typedef typename iterator_traits<ForwardIterator>::difference_type DistanceType;
+		DistanceType len = std::distance(first, last);
+		while (len > 0) {
+			DistanceType half = len >> 1;
+			ForwardIterator middle = first;
+			std::advance(middle, half);
+			if (comp(*middle, value) < 0) {
 				first = middle;
+				++first;
+				len = len - half - 1;
+			} else {
+				len = half;
 			}
 		}
-
-		if( !comp(*first, value) ){
-			return first;
-		}
-		return last;
+		return first;
 	}
 
 	template<class ForwardIterator, class T> _UCXXEXPORT
@@ -990,39 +973,21 @@ namespace std{
 		ForwardIterator upper_bound(ForwardIterator first, ForwardIterator last,
 			const T& value, Compare comp)
 	{
-		if(first == last){
-			return last;
-		}
-		//If below the first element
-		if( comp(value, *first) == true){
-			return first;
-		}
-
-		ForwardIterator middle;
-
-		//If greater than the top element
-		middle = first;
-		advance(middle, distance(first, last) - 1);
-		if( comp(*middle, value) ){
-			return last;
-		}
-
-		//Now begin the actual search for the end
-		while( distance(first, last) > 1 ){
-			//Find middle
-			middle = first;
-			advance(middle, (distance(first, last)/2) );
-			if( comp(value, *middle) ){
-				last = middle;
-			}else{
+		typedef typename iterator_traits<ForwardIterator>::difference_type DistanceType;
+		DistanceType len = std::distance(first, last);
+		while (len > 0) {
+			DistanceType half = len >> 1;
+			ForwardIterator middle = first;
+			std::advance(middle, half);
+			if (comp(value, *middle)){
+				len = half;
+			} else {
 				first = middle;
+				++first;
+				len = len - half - 1;
 			}
 		}
-
-		if( comp(value, *first) ){
-			return first;
-		}
-		return last;
+		return first;
 	}
 
 
diff --git a/include/type_traits b/include/type_traits
index e71584f..907c3f6 100644
--- a/include/type_traits
+++ b/include/type_traits
@@ -120,6 +120,39 @@ namespace std{
 	template<typename _Tp>
 	struct is_lvalue_reference<_Tp&> : public true_type { };
 
+	/// Member introspection.
+
+	/// is_trivial
+	template<typename _Tp>
+	struct is_trivial
+	: public integral_constant<bool, __is_trivial(_Tp)>
+	{ };
+
+	/// is_standard_layout
+	template<typename _Tp>
+	struct is_standard_layout
+	: public integral_constant<bool, __is_standard_layout(_Tp)>
+	{ };
+
+	/// is_pod
+	// Could use is_standard_layout && is_trivial instead of the builtin.
+	template<typename _Tp>
+	struct is_pod
+	: public integral_constant<bool, __is_pod(_Tp)>
+	{ };
+
+	// Define a nested type if some predicate holds.
+	// Primary template.
+	/// enable_if
+	template<bool, typename _Tp = void>
+	struct enable_if 
+	{ };
+
+	// Partial specialization for true.
+	template<typename _Tp>
+	struct enable_if<true, _Tp>
+	{ typedef _Tp type; };
+
 }
 
 #pragma GCC visibility pop
-- 
1.9.0

