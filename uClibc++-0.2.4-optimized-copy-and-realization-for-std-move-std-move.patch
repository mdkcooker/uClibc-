--- uClibc++-0.2.4/include/algorithm.copy_opt~	2014-03-24 21:28:37.702849230 +0100
+++ uClibc++-0.2.4/include/algorithm	2014-03-24 21:28:45.055176219 +0100
@@ -19,6 +19,7 @@
 #include <iterator>
 #include <utility>
 #include <functional>
+#include <type_traits>
 
 #ifndef __STD_HEADER_ALGORITHM
 #define __STD_HEADER_ALGORITHM 1
@@ -352,11 +353,43 @@ namespace std{
 
 	// subclause _lib.alg.modifying.operations_, modifying sequence operations:
 
+ 	// This one is should be as effective as memcpy with proper compiler
+ 	char* copy(char* first, char* last, char* result);
+ 	char* copy_backward(char* first, char* last, char* result);
+ 
+ 	// Specialization for trivially_copiable types. Avoids code bloat by using same realization for all types.
+ 	template<class T>
+ 	// is_trivially_copiable is missing in gcc 4.5
+ 	//inline typename std::enable_if<std::is_trivially_copiable<T>::value, T*>::type 
+ 	inline typename std::enable_if<std::is_trivial<T>::value, T*>::type 
+ 	copy(T* first, T* last, T* result) {
+ 		return reinterpret_cast<T*>(
+ 			copy(
+ 				reinterpret_cast<char*>(first),
+ 				reinterpret_cast<char*>(last) + sizeof(T) - 1,
+ 				reinterpret_cast<char*>(result)
+ 			)) - sizeof(T) + 1;
+ 	}
+ 
+ 	template<class T>
+ 	// is_trivially_copiable is missing in gcc 4.5
+ 	//inline typename std::enable_if<std::is_trivially_copiable<T>::value, T*>::type 
+ 	inline typename std::enable_if<std::is_trivial<T>::value, T*>::type 
+ 	copy_backward(T* first, T* last, T* result) {
+ 		return reinterpret_cast<T*>(
+ 			copy_backward(
+ 				reinterpret_cast<char*>(first),
+ 				reinterpret_cast<char*>(last) + sizeof(T) - 1,
+ 				reinterpret_cast<char*>(result)
+ 			)) - sizeof(T) + 1;
+ 	}
+ 
+     // Generic realization for all other types
 	template<class InputIterator, class OutputIterator> _UCXXEXPORT
 		OutputIterator
 		copy(InputIterator first, InputIterator last, OutputIterator result)
 	{
-		while(first != last){
+		while(first != last) {
 			*result = *first;
 			++first;
 			++result;
@@ -369,7 +402,7 @@ namespace std{
 		copy_backward(BidirectionalIterator1 first, BidirectionalIterator1 last,
 			BidirectionalIterator2 result)
 	{
-		while(first !=last ){
+		while(first !=last ) {
 			--result;
 			--last;
 			*result = *last;
@@ -377,11 +410,50 @@ namespace std{
 		return result;
 	}
 
+ 	// Specialization for trivially_copiable types. Avoids code bloat by using same realization for all types.
+ 	template<class T>
+ 	// is_trivially_copiable is missing in gcc 4.5
+ 	//inline typename std::enable_if<std::is_trivially_copiable<T>::value, T*>::type 
+ 	inline typename std::enable_if<std::is_trivial<T>::value, T*>::type 
+    	move(T* first, T* last, T* result) {
+         return copy(first, last, result);
+ 	}
+ 
+     // Generic realization for all other types
+ 	template<class InputIterator, class OutputIterator> _UCXXEXPORT
+ 		OutputIterator
+ 		move(InputIterator first, InputIterator last, OutputIterator result)
+ 	{
+ 		while(first != last) {
+ 			*(result++) = std::move(*(first++));
+ 		}
+ 		return result;
+ 	}
+ 
+ 	template<class T>
+ 	// is_trivially_copiable is missing in gcc 4.5
+ 	//inline typename std::enable_if<std::is_trivially_copiable<T>::value, T*>::type 
+ 	inline typename std::enable_if<std::is_trivial<T>::value, T*>::type 
+    	move_backward(T* first, T* last, T* result) {
+         return copy_backward(first, last, result);
+ 	}
+ 
+ 	template<class BidirectionalIterator1, class BidirectionalIterator2> _UCXXEXPORT
+ 		BidirectionalIterator2
+ 		move_backward(BidirectionalIterator1 first, BidirectionalIterator1 last,
+ 			BidirectionalIterator2 result)
+ 	{
+ 		while(first !=last ) {
+ 			*(--result) = std::move(*(--last));
+ 		}
+ 		return result;
+ 	}
+ 
 	template<class ForwardIterator1, class ForwardIterator2> _UCXXEXPORT
 		ForwardIterator2
 		swap_ranges(ForwardIterator1 first1, ForwardIterator1 last1, ForwardIterator2 first2)
 	{
-		while(first1 != last1){
+		while(first1 != last1) {
 			iter_swap(first1, first2);
 			++first1;
 			++first2;
--- uClibc++-0.2.4/src/algorithm.cpp.copy_opt~	2012-05-25 23:15:31.000000000 +0200
+++ uClibc++-0.2.4/src/algorithm.cpp	2014-03-24 21:28:51.303454107 +0100
@@ -23,8 +23,49 @@
 
 namespace std{
 
-
-
+	char* copy(char* first, char* last, char* result) {
+        #ifdef __AVR__
+        // This is 1/3 shorter than code produced by GCC
+        asm (
+            "   movw    r30, r24\n"     // Move first to index register Z
+            "   movw    r26, r20\n"     // Move result to index register X
+            "   rjmp    forward_loop_middle\n"
+            "forward_loop_start: ld r18, Z+\n"  // Copy data
+            "   st      X+, r18\n"
+            "forward_loop_middle: cp    r22, r30\n" // first != last
+            "   cpc     r23, r31\n" 
+            "   brne    forward_loop_start\n"
+            "   movw    r24, r30\n"
+        );
+        #else
+		while(first != last){
+			*(result++) = *(first++);
+		}
+		return result;
+        #endif
+	}
+
+	char* copy_backward(char* first, char* last, char* result) {
+        #ifdef __AVR__
+        // This is 1/3 shorter than code produced by GCC
+        asm (
+            "   movw    r30, r22\n"     // Move first to index register Z
+            "   movw    r26, r20\n"     // Move result to index register X
+            "   rjmp    backward_loop_middle\n"
+            "backward_loop_start: ld r18, -Z\n"  // Copy data
+            "   st      -X, r18\n"
+            "backward_loop_middle: cp    r24, r30\n" // first != last
+            "   cpc     r25, r31\n" 
+            "   brne    backward_loop_start\n"
+            "   movw    r24, r30\n"
+        );
+        #else
+		while(first != last){
+			*(--result) = *(--last);
+		}
+		return result;
+        #endif
+	}
 }
 
 
