From 116d391f9b73510491f892eacdcc8123099f828e Mon Sep 17 00:00:00 2001
From: Alexey Guseynov <kibergus@gmail.com>
Date: Sun, 12 Aug 2012 21:33:10 +0400
Subject: [PATCH] std::move and std::forward

---
 include/algorithm   |   6 ---
 include/bits/move.h | 133 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 include/forward.h   |  53 ++++++++++++++++++++++++
 include/type_traits |  36 ++++++++++++++++
 include/utility     |   1 +
 include/utility.h   |   3 +-
 include/vector      |   2 +-
 7 files changed, 226 insertions(+), 8 deletions(-)
 create mode 100644 bits/move.h
 create mode 100644 forward.h
 create mode 100644 utility

diff --git a/include/algorithm b/include/algorithm
index 884ac57..8156d03 100644
--- a/include/algorithm
+++ b/include/algorithm
@@ -377,12 +377,6 @@ namespace std{
 		return result;
 	}
 
-	template<class T> _UCXXEXPORT void swap(T& a, T& b){
-		T temp(a);
-		a = b;
-		b = temp;
-	}
-
 	template<class ForwardIterator1, class ForwardIterator2> _UCXXEXPORT
 		ForwardIterator2
 		swap_ranges(ForwardIterator1 first1, ForwardIterator1 last1, ForwardIterator2 first2)
diff --git a/include/bits/move.h b/include/bits/move.h
new file mode 100644
index 0000000..8ba945d
--- /dev/null
+++ b/include/bits/move.h
@@ -0,0 +1,133 @@
+// Move, forward and identity for C++0x + swap -*- C++ -*-
+
+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
+//
+// This file is part of the GNU ISO C++ Library.  This library is free
+// software; you can redistribute it and/or modify it under the
+// terms of the GNU General Public License as published by the
+// Free Software Foundation; either version 3, or (at your option)
+// any later version.
+
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// Under Section 7 of GPL version 3, you are granted additional
+// permissions described in the GCC Runtime Library Exception, version
+// 3.1, as published by the Free Software Foundation.
+
+// You should have received a copy of the GNU General Public License and
+// a copy of the GCC Runtime Library Exception along with this program;
+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+// <http://www.gnu.org/licenses/>.
+
+/** @file bits/move.h
+ *  This is an internal header file, included by other library headers.
+ *  Do not attempt to use it directly. @headername{utility}
+ */
+
+#ifndef _MOVE_H
+#define _MOVE_H 1
+
+//#include <bits/concept_check.h>
+
+namespace std
+{
+  // Used, in C++03 mode too, by allocators, etc.
+  template<typename _Tp>
+    inline _Tp*
+    __addressof(_Tp& __r)
+    {
+      return reinterpret_cast<_Tp*>
+	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
+    }
+} // namespace
+
+#ifdef __GXX_EXPERIMENTAL_CXX0X__
+#include <type_traits> // Brings in std::declval too.
+
+namespace std
+{ 
+  /// forward (as per N3143)
+  template<typename _Tp>
+    inline _Tp&&
+    forward(typename std::remove_reference<_Tp>::type& __t) 
+    { return static_cast<_Tp&&>(__t); }
+
+  template<typename _Tp>
+    inline _Tp&&
+    forward(typename std::remove_reference<_Tp>::type&& __t) 
+    {
+      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
+		    " substituting _Tp is an lvalue reference type");
+      return static_cast<_Tp&&>(__t);
+    }
+
+  /**
+   *  @brief Move a value.
+   *  @ingroup mutating_algorithms
+   *  @param  __t  A thing of arbitrary type.
+   *  @return Same, moved.
+  */
+  template<typename _Tp>
+    inline typename std::remove_reference<_Tp>::type&&
+    move(_Tp&& __t)
+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
+
+  /// declval, from type_traits.
+
+  /**
+   *  @brief Returns the actual address of the object or function
+   *         referenced by r, even in the presence of an overloaded
+   *         operator&.
+   *  @param  __r  Reference to an object or function.
+   *  @return   The actual address.
+  */
+  template<typename _Tp>
+    inline _Tp*
+    addressof(_Tp& __r)
+    { return std::__addressof(__r); }
+} // namespace
+
+#define _GLIBCXX_MOVE(__val) std::move(__val)
+#define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
+#else
+#define _GLIBCXX_MOVE(__val) (__val)
+#define _GLIBCXX_FORWARD(_Tp, __val) (__val)
+#endif
+
+namespace std
+{
+  /**
+   *  @brief Swaps two values.
+   *  @ingroup mutating_algorithms
+   *  @param  __a  A thing of arbitrary type.
+   *  @param  __b  Another thing of arbitrary type.
+   *  @return   Nothing.
+  */
+  template<typename _Tp>
+    inline void
+    swap(_Tp& __a, _Tp& __b)
+    {
+      // concept requirements
+// FIXME
+//      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
+
+      _Tp __tmp = _GLIBCXX_MOVE(__a);
+      __a = _GLIBCXX_MOVE(__b);
+      __b = _GLIBCXX_MOVE(__tmp);
+    }
+
+  // _GLIBCXX_RESOLVE_LIB_DEFECTS
+  // DR 809. std::swap should be overloaded for array types.
+  template<typename _Tp, size_t _Nm>
+    inline void
+    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
+    {
+      for (size_t __n = 0; __n < _Nm; ++__n)
+	swap(__a[__n], __b[__n]);
+    }
+} // namespace
+
+#endif /* _MOVE_H */
diff --git a/include/forward.h b/include/forward.h
new file mode 100644
index 0000000..186c858
--- /dev/null
+++ b/include/forward.h
@@ -0,0 +1,53 @@
+/*
+ * avr-gcc lacks C++ standard library. I need some
+ * things form this library so I copied them here.
+ */
+
+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.
+//
+// This file is part of GCC.
+//
+// GCC is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation; either version 3, or (at your option)
+// any later version.
+//
+// GCC is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// Under Section 7 of GPL version 3, you are granted additional
+// permissions described in the GCC Runtime Library Exception, version
+// 3.1, as published by the Free Software Foundation.
+
+// You should have received a copy of the GNU General Public License and
+// a copy of the GCC Runtime Library Exception along with this program;
+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+// <http://www.gnu.org/licenses/>.
+
+#ifndef FORWARD_H_INCLIUDED
+#define FORWARD_H_INCLIUDED
+
+namespace std {
+
+#include "type_traits"
+
+/// forward (as per N3143)
+template<typename _Tp>
+    inline _Tp&&
+    forward(typename std::remove_reference<_Tp>::type& __t) 
+    { return static_cast<_Tp&&>(__t); }
+
+template<typename _Tp>
+    inline _Tp&&
+    forward(typename std::remove_reference<_Tp>::type&& __t) 
+    {
+      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
+		    " substituting _Tp is an lvalue reference type");
+      return static_cast<_Tp&&>(__t);
+    }
+    
+} // namespace std
+
+#endif // FORWARD_H_INCLIUDED
diff --git a/include/type_traits b/include/type_traits
index fa1de40..e71584f 100644
--- a/include/type_traits
+++ b/include/type_traits
@@ -82,7 +82,43 @@ namespace std{
 		typedef __true_type value;
 	};
 
+	/// remove_reference
+	template<typename _Tp>
+	struct remove_reference {
+		typedef _Tp type;
+	};
+
+	template<typename _Tp>
+	struct remove_reference<_Tp&> {
+		typedef _Tp type;
+	};
+
+	template<typename _Tp>
+	struct remove_reference<_Tp&&> {
+		typedef _Tp type;
+	};
+
+	/// integral_constant
+	template<typename _Tp, _Tp __v>
+	struct integral_constant {
+		static constexpr _Tp                  value = __v;
+		typedef _Tp                           value_type;
+		typedef integral_constant<_Tp, __v>   type;
+		constexpr operator value_type() { return value; }
+    };
+
+	/// typedef for true_type
+	typedef integral_constant<bool, true>     true_type;
+
+	/// typedef for false_type
+	typedef integral_constant<bool, false>    false_type;
+
+	/// is_lvalue_reference
+	template<typename>
+	struct is_lvalue_reference : public false_type { };
 
+	template<typename _Tp>
+	struct is_lvalue_reference<_Tp&> : public true_type { };
 
 }
 
diff --git a/include/utility.h b/include/utility.h
index b654679..8dcd046 100644
--- a/include/utility
+++ b/include/utility
@@ -19,7 +19,8 @@
 
 
 #include <basic_definitions>
-
+#include <bits/move.h>
+#include <initializer_list>
 
 #ifndef __STD_HEADER_UTILITY
 #define __STD_HEADER_UTILITY 1
diff --git a/include/vector b/include/vector
index 96cdc63..4f5ea24 100644
--- a/include/vector
+++ b/include/vector
@@ -298,7 +298,7 @@ namespace std{
 		template <class InputIterator>
 			inline void _dispatch_insert(iterator position, InputIterator first, InputIterator last, __false_type)
 		{
-				_insert_from_iterator(position, first, last);
+			_insert_from_iterator(position, first, last);
 		}
 
 		inline void insert(iterator position, size_type n, const T& x ){
-- 
1.9.0

